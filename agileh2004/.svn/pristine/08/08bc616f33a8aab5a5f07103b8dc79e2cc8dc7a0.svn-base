/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/java_library_plugin.html
 */

plugins {
	id 'java'
	id 'eclipse' // optional (to generate Eclipse project files)
	id 'application'
  	id 'org.openjfx.javafxplugin' version '0.0.8'
  	id "org.sonarqube" version "2.8"
  	id 'jacoco'
}

mainClassName = 'application.EntryPoint'

repositories {
	mavenCentral() // to get the jars
}

javafx {
    version = "11.0.2"
    modules = ['javafx.base', 'javafx.controls', 'javafx.fxml', 'javafx.swing','javafx.graphics'] 
    /* -ea --module-path /Users/gonr1001/Documents/javafx-sdk-11.0.2/lib --add-modules=javafx.controls,javafx.fxml,javafx.swing,javafx.graphics*/   
}

jacoco {
    toolVersion = "0.8.4"
    reportsDir = file("./reports")
}

dependencies {     
  	// TestFX
	testCompile(group: "org.testfx", name: "testfx-junit5", version: "4.0.16-alpha")
	testCompile(group: "org.testfx", name: "testfx-core", version: "4.0.16-alpha") //depends de testfx-junit5
	testCompile('org.testfx:testfx-core:4.0.16-alpha') {
    	exclude group: 'org.testfx', module: 'testfx-internal-java8'
	}
    testCompile(group: 'org.testfx', name: 'openjfx-monocle', version: 'jdk-11+26')
    
	// JUnit
	testCompile(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.5.2')
	testCompile(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.5.2')
	testCompile 'junit:junit:4.12'
	
	testCompile(group: 'org.jacoco', name: 'org.jacoco.agent', version: '0.8.4')
	testCompile(group: 'org.picocontainer', name: 'picocontainer', version: '2.15')
}

test {
	useJUnitPlatform()
	if (project.hasProperty('headless')) {
        systemProperty 'java.awt.headless', 'true'
        systemProperty 'testfx.robot', 'glass'
        systemProperty 'testfx.headless', 'true'
        systemProperty 'testfx.setup.timeout', '600000'
        exclude("**/ExampleOfREM.*") // Ne marche pas sur Jenkins
    } else {
    	exclude("**/SaveTest.*") // the save test does not work on a computer with gradle but works fine on jenkins and when is launched via JUnit
    }
    // Ne marche pas toujours Ã  cause de l'alÃ©atoire
	exclude('**/AlignmentTest.*')
	
	testLogging {
		events "passed", "skipped", "failed"
	}
	
	 // set heap size for the test JVM(s)
  	maxHeapSize = "1576m"
}

run {
    if (javafx.platform.classifier == 'win') {
        // Temporal fix for Eclipse with JDK 1.8 and Windows 
        systemProperty "java.library.path", "C:\tmp"
    }
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectKey", "ddrawUSKey"
        property "sonar.projectName", "ddrawUS"
		property "sonar.projectVersion", "1.6"
		property "sonar.sources", "${project.projectDir}/src/main/java"
		property "sonar.tests", "${project.projectDir}/src/test/java"
		property "sonar.java.coveragePlugin", "jacoco"
		property "sonar.coverage.jacoco.xmlReportPaths", "${project.projectDir}/reports/test/jacocoTestReport.xml"
		property "sonar.host.url", "http://sonar.gel.usherbrooke.ca:9000"
		//property "sonar.java.libraries", "${project.projectDir}/lib"
		//property "sonar.java.binaries", "${sourceSets.main.output.classesDirs}" // no binaries on jenkins
		//property "sonar.java.test.libraries", "${project.projectDir}/lib"
		property "sonar.scm.disabled", "true"
    }
}


jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
      	html.enabled false
    }
}

task copyDependencies(type: Copy) {
   from configurations.testCompile
   into './lib'
   doLast {
   		println 'Export of dependencies to lib folder done !'
   }
}

task sonarscan {
	group='verification'
	dependsOn ':copyDependencies'
	dependsOn ':test'
	dependsOn ':jacocoTestReport'
	dependsOn ':sonarqube'
	doLast {
		println 'Sonarqube analysis done !'
	}
}

// Allow to clean the destination directory to avoid testing all tests
[compileJava,compileTestJava].each { task ->
  task.doFirst {
     delete task.destinationDir
  }
}