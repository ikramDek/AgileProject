package application.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import javafx.collections.ObservableList;
import javafx.geometry.Point2D;
import javafx.scene.Node;
import javafx.scene.control.TreeItem;
import javafx.scene.layout.GridPane;
import javafx.scene.paint.Color;
import javafx.scene.paint.Paint;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Shape;
import javafx.scene.shape.StrokeLineCap;
import javafx.scene.transform.Translate;

public abstract class SingleShape implements MyShape {

	protected static final int ENLARGE_CONST = 5;

	private static final int ROTATE_CONST = 5;

	private static final String IMAGE_URL = "imageUrl";

	private static final double HANDELS_SIZE_CONST = 4;

	protected ComposedShape root;
	protected String layoutName;
	protected Shape shape;
	protected boolean isSelected = false;

	protected Double startX;
	protected Double startY;
	protected Double endX;
	protected Double endY;
	protected Color strokeColor;
	protected Double strokeSize;
	protected Double rotate;
	protected Translate translate;
	protected boolean isPattern;
	protected Filler filler;
	protected Circle[] circles;
	
	protected boolean  isflipedX=false;
	protected boolean  isflipedY=false;
	
	double orgSceneX;
	double orgSceneY;

	public void applyRotation() {
		shape.setRotate(this.rotate);
	}

	public void arrangeStartAndEndXY() {
		if (startX > endX) {
			Double tmp = startX;
			startX = endX;
			endX = tmp;
		}

		if (startY > endY) {
			Double tmp = startY;
			startY = endY;
			endY = tmp;
		}
	}

	public void changeStrokeColor(Color value) {
		shape.setStroke(value);
		updateFields();
	}

	public void changeStrokeWidth(int x) {
		shape.setStrokeWidth(x);
		updateFields();
	}

	public abstract SingleShape clone1();

	@Override
	public Element createNode(Element sh, Document dom) {
		Map<String, Double> m = getProperties();
		for (java.util.Map.Entry<String, Double> entry : m.entrySet()) {
			String key = entry.getKey();
			Double value = entry.getValue();
			sh.setAttribute(key, value.toString());
		}
		return sh;
	}

	public abstract void createShape(boolean isUsingCenter, boolean isUsingMagnetism, GridPane gridPane);

	public abstract Shape createShapeClone(Shape c);

	protected abstract void createShapeForImport();

	public void disableDraggable() {
		shape.setOnMousePressed(t -> {
		});
		shape.setOnMouseDragged(t -> {
		});
	}

	public abstract void dragOnDragged(double x, double y, Shape c);

	public void resizeOnPressed(double x, double y) {
		onPressed(x, y);
	}

	public void dragOnPressed(double x, double y) {
		resizeOnPressed(x, y);
	}

	public void dragOnReleased(Paint color, double str) {
		this.isSelected = true;
		this.shape.setStroke(color);
		this.shape.setStrokeWidth(str);
		updateFields();
	}

	@Override
	public void draw(ObservableList<Node> children) {
		children.add(getShape());
	}

	public void drawWithMagnetism(GridPane gridPane) {
		double width = gridPane.getWidth();
		double height = gridPane.getHeight();
		final long numCols = gridPane.getColumnCount();
		final long numRows = gridPane.getRowCount() - 1L;
		double cellWidth = width / numCols;
		double cellHeight = height / numRows;

		drawWithMagnetismStartPoint(numCols, numRows, cellWidth, cellHeight);
		drawWithMagnetismEndPoint(numCols, numRows, cellWidth, cellHeight);

	}

	private void drawWithMagnetismEndPoint(final long numCols, final long numRows, double cellWidth,
			double cellHeight) {
		for (int i = 0; i < numCols; i++) {
			if (endX > i * cellWidth && endX <= (i + 1) * cellWidth) {
				endX = (i + 1) * cellWidth;
			}
			for (int j = 0; j < numRows; j++) {
				if (endY > j * cellHeight && endY < (j + 1) * cellHeight) {
					endY = (j + 1) * cellHeight;
				}
			}
		}
	}

	private void drawWithMagnetismStartPoint(final long numCols, final long numRows, double cellWidth,
			double cellHeight) {
		for (int i = 0; i < numCols; i++) {
			if (startX > i * cellWidth && startX <= (i + 1) * cellWidth) {
				startX = i * cellWidth;
			}
			for (int j = 0; j < numRows; j++) {
				if (startY > j * cellHeight && startY < (j + 1) * cellHeight) {
					startY = j * cellHeight;
				}
			}
		}
	}

	public abstract SingleShape emptyClone();

	public boolean findPoint(double x1, double y1, double x2, double y2, double x, double y) {
		return (x > x1 && x < x2 && y > y1 && y < y2);
	}

	public Circle[] getCircles() {
		return this.circles;
	}

	public MyShape getClone() {
		SingleShape clone = emptyClone();
		clone.setProperties(this.getProperties());
		clone.createShapeForImport();
		return clone;
	}

	public double getEndX() {
		return endX;
	}

	public double getEndY() {
		return endY;
	}

	public Filler getFiller() {
		return filler;
	}

	public Double getHeight() {
		return endX - startX;
	}

	public String getLayout() {
		return layoutName;
	}

	public ArrayList<MyShape> getList() {
		ArrayList<MyShape> list = new ArrayList<>();
		list.add(this);
		return list;
	}

	public Map<String, Double> getProperties() {

		HashMap<String, Double> properties = new HashMap<>();

		properties.put("LayoutName", Double.parseDouble(layoutName.substring(6)));

		properties.put("startPositionX", (double) startX);
		properties.put("startPositionY", (double) startY);

		properties.put("endPositionX", (double) endX);
		properties.put("endPositionY", (double) endY);

		properties.put("topLeftX", (double) startX);
		properties.put("topLeftY", (double) startY);

		properties.put("strokeSize", (double) shape.getStrokeWidth());
		if (!filler.isColor()) {
			String pattern = ((PatternFiller) filler).getImageUrl().substring(
					((PatternFiller) filler).getImageUrl().lastIndexOf('/') + 1,
					((PatternFiller) filler).getImageUrl().lastIndexOf('.'));
			properties.put(IMAGE_URL, (double) Integer.parseInt(pattern));
		} else {
			properties.put("fillR", ((ColorFiller) filler).getColor().getRed());
			properties.put("fillG", ((ColorFiller) filler).getColor().getGreen());
			properties.put("fillB", ((ColorFiller) filler).getColor().getBlue());
			properties.put("fillOpacity", ((ColorFiller) filler).getColor().getOpacity());
		}
		properties.put("strockR", strokeColor.getRed());
		properties.put("strockG", strokeColor.getGreen());
		properties.put("strockB", strokeColor.getBlue());

		properties.put("rotateValue", shape.getRotate());

		return properties;
	}

	public ComposedShape getRoot() {
		return root;
	}

	public Shape getShape() {
		return shape;
	}

	public ArrayList<SingleShape> getSingleShapeList() {
		ArrayList<SingleShape> list = new ArrayList<>();
		list.add(this);
		return list;
	}

	public double getStartX() {
		return startX;
	}

	public double getStartY() {
		return startY;
	}

	public Color getStrokeColor() {
		return strokeColor;
	}

	public double getStrokeSize() {
		return strokeSize;
	}

	public Double getWidth() {
		return endY - startY;
	}

	public void initCircles() {
		this.circles = new Circle[4];
		for (int i = 0; i < circles.length; i++) {
			circles[i] = new Circle(HANDELS_SIZE_CONST, Color.GOLD);
		}
	}

	@Override
	public boolean isInside(Double startX, Double startY, Double currentX, Double currentY) {
		return findPoint(startX, startY, currentX, currentY, this.startX, this.startY)
				|| findPoint(startX, startY, currentX, currentY, this.endX, this.endY)
				|| findPoint(startX, startY, currentX, currentY, this.startX, this.endY)
				|| findPoint(startX, startY, currentX, currentY, this.endX, this.startY);

	}

	public boolean isPattern() {
		return isPattern;
	}

	public boolean isSelected() {
		return isSelected;
	}

	public void onPressed(double x, double y) {
		this.shape.setStroke(Color.RED);
		this.shape.setStrokeWidth(5);
		orgSceneX = x;
		orgSceneY = y;
	}

	public abstract void resizeOnDragged(double x, double y, Shape c);

	public void resizeOnReleased(Paint color, double str) {
		this.isSelected = true;
		this.shape.setStroke(color);
		this.shape.setStrokeWidth(str);
		this.shape.setStrokeLineCap(StrokeLineCap.BUTT);
		this.shape.getStrokeDashArray().clear();
		this.shape.setStrokeDashOffset(str);
		updateFields();
	}

	public void rotateShape() {
		shape.setRotate(shape.getRotate() + ROTATE_CONST);
		updateFields();
	}

	public void setEndX(Double endX) {
		this.endX = endX;
	}

	public void setEndY(Double endY) {
		this.endY = endY;
	}

	@Override
	public void setFill(Paint pattern) {
		getShape().setFill(pattern);
	}

	public void setFiller(ColorFiller colorFiller) {
		filler = colorFiller;
	}

	public void setFiller(Filler filler) {
		this.filler = filler;
	}

	public void setHadelsVisible(Boolean value) {
		initCircles();
		for (Circle circle : circles) {
			circle.setVisible(value);
		}
	}

	public void setHandelsPos() {
		this.circles[0].setCenterX(this.shape.getLayoutBounds().getMinX());
		this.circles[0].setCenterY(this.shape.getLayoutBounds().getMinY());

		this.circles[1].setCenterX(this.shape.getLayoutBounds().getMaxX());
		this.circles[1].setCenterY(this.shape.getLayoutBounds().getMinY());

		this.circles[2].setCenterX(this.shape.getLayoutBounds().getMinX());
		this.circles[2].setCenterY(this.shape.getLayoutBounds().getMaxY());

		this.circles[3].setCenterX(this.shape.getLayoutBounds().getMaxX());
		this.circles[3].setCenterY(this.shape.getLayoutBounds().getMaxY());
	}

	public void setPattern(boolean isPattern) {
		this.isPattern = isPattern;
	}

	public void setProperties(Point2D start, Point2D end, Color strokeColor, Double strokeSize, Filler filler,
			Double rotate, String layoutName) {
		this.startX = start.getX();
		this.startY = start.getY();
		this.endX = end.getX();
		this.endY = end.getY();
		this.filler = filler;
		this.strokeSize = strokeSize;
		this.strokeColor = strokeColor;
		this.rotate = rotate;
		this.layoutName = layoutName;

	}

	public void setProperties(Map<String, Double> properties) {
		layoutName = "Layout" + (properties.get("LayoutName")).intValue();
		startX = properties.get("startPositionX");
		startY = properties.get("startPositionY");

		endX = properties.get("endPositionX");
		endY = properties.get("endPositionY");

		strokeSize = properties.get("strokeSize");

		rotate = properties.get("rotateValue");

		Double strockR = properties.get("strockR");
		Double strockG = properties.get("strockG");
		Double strockB = properties.get("strockB");

		strokeColor = Color.color(strockR, strockG, strockB);

		if (properties.containsKey(IMAGE_URL)) {
			filler = new PatternFiller("src/main/resources/" + (properties.get(IMAGE_URL)).intValue() + ".jpg", this);
		} else {
			Double fillR = properties.get("fillR");
			Double fillG = properties.get("fillG");
			Double fillB = properties.get("fillB");
			Double fillOpacity = properties.get("fillOpacity");
			filler = new ColorFiller(Color.color(fillR, fillG, fillB, fillOpacity), this);
		}

	}

	@Override
	public void setRoot(ComposedShape compShape) {
		root = compShape;
	}

	public void setSelected(boolean isSelected) {
		this.isSelected = isSelected;
	}

	public void setShape(Shape shape) {
		this.shape = shape;
	}

	public void setStartX(Double startX) {
		this.startX = startX;
	}

	public void setStartY(Double startY) {
		this.startY = startY;
	}

	public void setStrokeColor(Color strokeColor) {
		this.strokeColor = strokeColor;
	}

	public void setStrokeSize(double strokeSize) {
		this.strokeSize = strokeSize;
	}

	@Override
	public TreeItem<String> getTreeItem() {
		TreeItem<String> tmpTreeItem = new TreeItem<>(this.toString());
		tmpTreeItem.setExpanded(true);
		return tmpTreeItem;
	}

}
