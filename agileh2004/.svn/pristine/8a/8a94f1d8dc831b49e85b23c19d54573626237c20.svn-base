package application.controller;

import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.ResourceBundle;

import application.model.Canevas;
import application.model.ColorFiller;
import application.model.ComposedShape;
import application.model.Filler;
import application.model.Layout;
import application.model.MyRectangle;
import application.model.MyShape;
import application.model.PatternFiller;
import application.model.SingleShape;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.geometry.Point2D;
import javafx.scene.Group;
import javafx.scene.control.ColorPicker;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.MenuItem;
import javafx.scene.control.ScrollPane;
import javafx.scene.input.ContextMenuEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.GridPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Shape;
import javafx.stage.Stage;

public class CanevasController implements Initializable {

	
	//private Rectangle boundingBox ;
	private static final double DEFAULT_ROTATION = 0;

	public static double clamp(double value, double min, double max) {

		if (Double.compare(value, min) < 0)
			return min;

		if (Double.compare(value, max) > 0)
			return max;

		return value;
	}

	int prefHeight = 500;

	int prefWidth = 770;

	private ArrayList<Integer> selectedList;
	@FXML
	private Group root;
	@FXML
	private AnchorPane anchorPane;
	@FXML
	private AnchorPane canvas;// The canvas on which the image is drawn.
	@FXML
	private ScrollPane scrollPane;

	@FXML
	private GridPane gridPane;
	ContextMenu contextMenuGroup = new ContextMenu();
	ContextMenu contextMenuShape=new ContextMenu();
	MenuItem item1 = new MenuItem("save as a new shape");
    MenuItem item4 = new MenuItem("flip horizontal");
    MenuItem item5 = new MenuItem("flip vertical");
	MenuItem item2= new MenuItem("move to front");
	MenuItem item3= new MenuItem("move to back");
	MenuItem item6= new MenuItem("move forward");
	MenuItem item7= new MenuItem("move backward");

	private AnchorPane overlay;// A transparent canvas that lies on top of
	private Double startX;// start point of drag

	private Double startY; // start point of drag
	private Double currentX;// current mouse position during a drag

	private Double currentY;// current mouse position during a drag
	private SingleShape shapeSelected=null;
	private SingleShape currentShape = null; // The current drawing shape.

	private ArrayList<Layout> layoutsList;

	private ColorPicker fillColorPicker;

	private ColorPicker strokeColorPicker;

	private double strokeSize = 1;

	private String selectedPatternUrl = "";
	private boolean isUsingCenter = true;
	private boolean isUsingMagnetism = false;
	private boolean isFilled = false;

	private boolean isSelectionMode;
	private ChangesController changesController;
	private MenuUIController menuUIController;
	private StatusBarController stausBarController;
	private Layout currLayout;

	private int layoutsCounter = 0;

	private PaletteOutilsUIController paletteOutilsUI;

	public void changeSelectedStrokeColor(Color value) {
		getSelectedShape().changeStrokeColor(value);
	}

	public void clearAll() {
		this.getLayoutsList().clear();
		this.canvas.getChildren().clear();
		canvas.getChildren().add(gridPane);
		layoutsCounter = 0;
		currLayout = new Layout("Layout" + layoutsCounter, true);
		layoutsList.add(currLayout);
		menuUIController.getHistoryController().refreshHistoryTable();
	}

	public MenuUIController getMenuUIController() {
		return menuUIController;
	}

	public void clearSelection() {
		//stausBarController.setSelectedText(null);
		for (MyShape myShape : getAllShapesList()) {
			myShape.setSelected(false);
		}
	}

	public void createNewLayout() {
		layoutsCounter++;
		currLayout = new Layout("Layout" + layoutsCounter, true);
		layoutsList.add(currLayout);
	}

	public void deleteCurrentLayout() {
		layoutsList.remove(currLayout);
		this.canvas.getChildren().clear();
		this.canvas.getChildren().add(gridPane);
		for (MyShape myShape : getAllShapesList()) {
			myShape.draw(this.canvas.getChildren());
		}
	}

	public void displayAll() {
		for (int i = 0; i < layoutsList.size(); i++) {
			layoutsList.get(i).setDisplayed(true);
			currLayout = layoutsList.get(i);
		}
		this.canvas.getChildren().clear();
		this.canvas.getChildren().add(gridPane);
		for (MyShape myShape : getAllShapesList()) {
			myShape.draw(this.canvas.getChildren());
		}
	}

	public void displaySelected() {
		ArrayList<Integer> selected = (ArrayList<Integer>) menuUIController.getSelectedLayouts();

		for (int i = 0; i < layoutsList.size(); i++) {
			if (!selected.contains(i))
				layoutsList.get(i).setDisplayed(false);
			else {
				currLayout = layoutsList.get(i);
				layoutsList.get(i).setDisplayed(true);
			}
		}
		this.canvas.getChildren().clear();
		this.canvas.getChildren().add(gridPane);
		for (MyShape myShape : getAllShapesList()) {
			myShape.draw(this.canvas.getChildren());
		}
	}

	public void fillSelectedShapeWithColor(Color value) {
		getSelectedShape().setFill(value);
		getSelectedShape().setFiller(new ColorFiller(value, getSelectedShape()));
		getSelectedShape().setPattern(false);
		getSelectedShape().updateFields();
	}

	private Layout findLayoutByName(String string) {
		for (Layout layout : layoutsList) {
			if (layout.getLayoutName().equals(string))
				return layout;
		}
		return null;
	}

	ArrayList<MyShape> getAllShapesList() {
		ArrayList<MyShape> list = new ArrayList<>();
		for (Layout layout : layoutsList) {
			if (layout.isDisplayed()) {
				list.addAll(layout.getShapesList());
			}
		}
		return list;
	}

	public AnchorPane getAnchorPane() {
		return anchorPane;
	}

	public AnchorPane getCanvas() {
		return canvas;
	}

	public ChangesController getChangesController() {
		return changesController;
	}

	private Filler getCurrentFiller() {
		Filler filler;

		if (selectedPatternUrl.equals(""))
			filler = new ColorFiller(fillColorPicker.getValue(), currentShape);
		else
			filler = new PatternFiller(selectedPatternUrl, currentShape);

		return filler;
	}

	public MyShape getCurrentShape() {
		return currentShape;
	}

	public ColorPicker getFillColorPicker() {
		return fillColorPicker;
	}

	public GridPane getGridPane() {
		return gridPane;
	}

	public String getImagePattern() {
		return selectedPatternUrl;
	}

	public List<Layout> getLayoutsList() {
		return layoutsList;
	}

	public ScrollPane getScrollPane() {
		return scrollPane;
	}

	public MyShape getSelectedShape() {
		for (MyShape myShape : getAllShapesList()) {
			if (myShape.isSelected()) {
				return myShape;
			}
		}
		return null;
	}
	
	public void setSelected(MyShape shape) {
		shape.setSelected(true);
	}

	public List<MyShape> getAllShapes() {
		ArrayList<MyShape> list = new ArrayList<>();
		for (Layout layout : layoutsList) {
			list.addAll(layout.getShapesList());
		}
		return list;
	}

	public List<MyShape> getShapesListClone() {
		ArrayList<MyShape> tmpList = new ArrayList<>();

		for (MyShape myShape : getAllShapesList()) {
			tmpList.add(myShape.getClone());
		}
		return tmpList;
	}

	private ArrayList<SingleShape> getSingleShapesList() {
		ArrayList<SingleShape> list = new ArrayList<>();
		for (MyShape myShape : getAllShapesList()) {
			list.addAll(myShape.getSingleShapeList());
		}
		return list;
	}

	public Stage getStage() {

		return (Stage) canvas.getScene().getWindow(); // ceci est la mienne (Ayoub)
	}

	public StatusBarController getStausBarController() {
		return stausBarController;
	}

	public ColorPicker getStrokeColorPicker() {
		return strokeColorPicker;
	}

	public double getStrokeSize() {
		return strokeSize;
	}

	public ComposedShape groupSelection() {
		//
		if (selectedList.size() > 1) {
			ComposedShape compShape = new ComposedShape();
			


			ArrayList<MyShape> list = new ArrayList<>();
			int indexToPlaceCompShape = selectedList.stream().mapToInt(v -> v).min()
					.orElseThrow(NoSuchElementException::new);
			for (Integer index : selectedList) {
				MyShape myShape = currLayout.getShape(index);
				myShape.setRoot(compShape);
				list.add(0, myShape);
				currLayout.removeShape(index.intValue());
			}
			compShape.setLayout(list.get(0).getLayout());
			compShape.setList(list);
			currLayout.addShape(indexToPlaceCompShape, compShape);
			
			this.canvas.getChildren().clear();
			this.canvas.getChildren().add(gridPane);
			for (MyShape myShape : getAllShapesList()) {
				myShape.draw(this.canvas.getChildren());
			}
			compShape.setHandelsPos();
			compShape.setHadelsVisible(false);
			canvas.getChildren().addAll(compShape.getCircles());
			
			return compShape;
		}
		return null;
	}

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		layoutsList = new ArrayList<>();
		currLayout = new Layout("Layout0", true);
		layoutsList.add(currLayout);
		canvas.setOnMouseDragged(this::mouseDragged);
		canvas.setOnMousePressed(this::mousePressed);
		canvas.setOnMouseReleased(e -> mouseReleased());
		overlay = new AnchorPane();
		
		changesController = new ChangesController(this);

	}

	public boolean isFilled() {
		return isFilled;
	}

	public boolean isUsingCenter() {
		return isUsingCenter;
	}

	public boolean isUsingMagnetism() {
		return isUsingMagnetism;
	}

	public void mouseDragged(MouseEvent evt) {
		currentX = evt.getX();
		currentY = evt.getY();
		if (currentShape != null) {

			overlay.getChildren().clear();
			if (!isFilled) {
				fillColorPicker.setValue(Color.TRANSPARENT);
			}
			currentShape.setProperties(new Point2D(startX, startY), new Point2D(currentX, currentY),
					strokeColorPicker.getValue(), getStrokeSize(), getCurrentFiller(), DEFAULT_ROTATION,
					currLayout.getLayoutName());
			if (isSelectionMode)
				currentShape.createShape(false, isUsingMagnetism, gridPane);
			else
				currentShape.createShape(isUsingCenter, isUsingMagnetism, gridPane);
			if (root.getChildren().size() < 2) { // means it's the first time
				root.getChildren().add(overlay);
			}
			overlay.getChildren().add(currentShape.getShape());
			stausBarController.setSelectedText(null);
		}
	}

	public void mouseDraggedSelection(MouseEvent evt) {
		currentX = evt.getX();
		currentY = evt.getY();
		if (currentShape != null) {
			// the shapes that have to be drew on the overlay canvas
			overlay.getChildren().clear();
			fillColorPicker.setValue(Color.TRANSPARENT);
			currentShape.setProperties(new Point2D(startX, startY), new Point2D(currentX, currentY),
					strokeColorPicker.getValue(), getStrokeSize(), getCurrentFiller(), DEFAULT_ROTATION,
					currLayout.getLayoutName());
			if (isSelectionMode)
				currentShape.createShape(false, isUsingMagnetism, gridPane);
			else
				currentShape.createShape(isUsingCenter, isUsingMagnetism, gridPane);
			if (root.getChildren().size() < 2) { // means it's the first time
				root.getChildren().add(overlay);
			}
			overlay.getChildren().add(currentShape.getShape());

		}
	}

	void mousePressed(MouseEvent evt) {
		this.clearSelection();
		startX = currentX = evt.getX();

		startY = currentY = evt.getY();
				
		showMenuGroup(false);
		showMenuShape(false, currentShape);
		// if selectedShape is null do nothing or write with pen ( en fonction du mode
		// de selection )

	}

	void mousePressedSelection(MouseEvent evt) {

		this.clearSelection();

		startX = currentX = evt.getX();

		startY = currentY = evt.getY();
		setCurrentShape(new MyRectangle());
	}

	public void mouseReleased() {
		if (root.getChildren().size() > 1) { // means it's the first time
			root.getChildren().remove(root.getChildren().size() - 1);
			changesController.getRedoList().clear();
			changesController.saveStateToUndo();
			currentShape.setProperties(new Point2D(startX, startY), new Point2D(currentX, currentY),
					strokeColorPicker.getValue(), getStrokeSize(), getCurrentFiller(), DEFAULT_ROTATION,
					currLayout.getLayoutName());

			if (isSelectionMode)
				currentShape.createShape(false, isUsingMagnetism, gridPane);
			else
				currentShape.createShape(isUsingCenter, isUsingMagnetism, gridPane);
			MyShape lastDrawnShape = currentShape;

			currLayout.addShape(lastDrawnShape);
			menuUIController.getHistoryController().refreshHistoryTable();
			currentShape = currentShape.clone1();
			//canvas.getChildren().add(((SingleShape) (currLayout.getLastShape())).getShape());
			lastDrawnShape.draw(canvas.getChildren());
			// modifier ces deux lignes par une methode qui parcours tout les shape et set
			// the handles
			//this two lines will probably throw an exception when trying to draw a custom shape
			//((SingleShape) (getAllShapesList().get(getAllShapesList().size() - 1))).setHadelsVisible(false);
			//((SingleShape) (getAllShapesList().get(getAllShapesList().size() - 1))).setHandelsPos();

			//canvas.getChildren().addAll(((SingleShape) (getAllShapesList().get(getAllShapesList().size() - 1))).getCircles());

			
		}

	}

	public void mouseReleasedSelection() {
		if (root.getChildren().size() > 1) { // means it's the first time
			root.getChildren().remove(root.getChildren().size() - 1);
			if (startX < currentX) {
				if (startY > currentY) {
					double temp = startY;
					startY = currentY;
					currentY = temp;
				}
			} else {
				double temp = startX;
				startX = currentX;
				currentX = temp;

				if (startY > currentY) {
					temp = startY;
					startY = currentY;
					currentY = temp;
				}
			}
			selectedList = new ArrayList<>();

			for (int i = currLayout.getShapesList().size() - 1; i >= 0; i--) {
				if (currLayout.getShape(i).isInside(startX, startY, currentX, currentY))
					selectedList.add(i);
			}
			
			showMenuGroup(true);
	

		}

	}

	public void moveBackward() {
		int i = -1;
		Layout tmplayout = currLayout;
		if (getSelectedShape() != null) {
			currLayout = findLayoutByName(getSelectedShape().getLayout());
			i = currLayout.getShapesList().indexOf(getSelectedShape());
		}
		if (i != -1 && i > 0) {
			MyShape tmp = currLayout.getShape(i);
			currLayout.setShape(i, currLayout.getShape(i - 1));
			currLayout.setShape(i - 1, tmp);

			this.canvas.getChildren().clear();
			this.canvas.getChildren().add(gridPane);
			for (MyShape myShape : getAllShapesList()) {
				myShape.draw(this.canvas.getChildren());
			}
		}
		currLayout = tmplayout;
	}

	public void moveForward() {
		int i = -1;
		Layout tmplayout = currLayout;
		if (getSelectedShape() != null) {
			currLayout = findLayoutByName(getSelectedShape().getLayout());
			i = currLayout.getShapesList().indexOf(getSelectedShape());
		}
		if (i != -1 && i < currLayout.getShapesList().size() - 1) {
			MyShape tmp = currLayout.getShape(i);
			currLayout.setShape(i, currLayout.getShape(i + 1));
			currLayout.setShape(i + 1, tmp);

			this.canvas.getChildren().clear();
			this.canvas.getChildren().add(gridPane);
			for (MyShape myShape : getAllShapesList()) {
				myShape.draw(this.canvas.getChildren());
			}
		}
		currLayout = tmplayout;
	}

	public void moveLayoutBackward() {
		ArrayList<Integer> selected = (ArrayList<Integer>) menuUIController.getSelectedLayouts();
		for (Integer i : selected) {
			if (i != -1 && i > 0) {
				Layout tmp = layoutsList.get(i);
				layoutsList.set(i, layoutsList.get(i - 1));
				layoutsList.set(i - 1, tmp);

				this.canvas.getChildren().clear();
				this.canvas.getChildren().add(gridPane);
				for (MyShape myShape : getAllShapesList()) {
					myShape.draw(this.canvas.getChildren());
				}
			}
		}
		menuUIController.refreshSelectLayoutList(layoutsList);
	}

	public void moveLayoutForward() {
		ArrayList<Integer> selected = (ArrayList<Integer>) menuUIController.getSelectedLayouts();
		for (Integer i : selected) {
			if (i != -1 && i < layoutsList.size() - 1) {
				Layout tmp = layoutsList.get(i);
				layoutsList.set(i, layoutsList.get(i + 1));
				layoutsList.set(i + 1, tmp);
				this.canvas.getChildren().clear();
				this.canvas.getChildren().add(gridPane);
				for (MyShape myShape : getAllShapesList()) {
					myShape.draw(this.canvas.getChildren());
				}
			}
		}
		menuUIController.refreshSelectLayoutList(layoutsList);
	}

	public void moveSelectedLayoutToBack() {
		ArrayList<Integer> selected = (ArrayList<Integer>) menuUIController.getSelectedLayouts();
		for (Integer i : selected) {
			if (i != -1 && i > 0) {
				Layout tmp = layoutsList.get(i);
				layoutsList.remove(i.intValue());
				layoutsList.add(0, tmp);

				this.canvas.getChildren().clear();
				this.canvas.getChildren().add(gridPane);
				for (MyShape myShape : getAllShapesList()) {
					myShape.draw(this.canvas.getChildren());
				}
			}
		}
		menuUIController.refreshSelectLayoutList(layoutsList);
	}

	public void moveSelectedLayoutToFront() {
		ArrayList<Integer> selected = (ArrayList<Integer>) menuUIController.getSelectedLayouts();
		for (Integer i : selected) {
			if (i != -1 && i < currLayout.getShapesList().size() - 1) {
				Layout tmp = layoutsList.get(i);
				layoutsList.remove(i.intValue());
				layoutsList.add(tmp);

				this.canvas.getChildren().clear();
				this.canvas.getChildren().add(gridPane);
				for (MyShape myShape : getAllShapesList()) {
					myShape.draw(this.canvas.getChildren());
				}
			}
		}
		menuUIController.refreshSelectLayoutList(layoutsList);
	}

	public void moveSelectedToBack() {
		int i = -1;
		Layout tmplayout = currLayout;
		if (getSelectedShape() != null) {
			currLayout = findLayoutByName(getSelectedShape().getLayout());
			i = currLayout.getShapesList().indexOf(getSelectedShape());
		}
		if (i != -1 && i > 0) {
			MyShape tmp = currLayout.getShape(i);
			currLayout.removeShape(i);
			currLayout.addShape(0, tmp);

			this.canvas.getChildren().clear();
			this.canvas.getChildren().add(gridPane);
			for (MyShape myShape : getAllShapesList()) {
				myShape.draw(this.canvas.getChildren());
			}
		}
		currLayout = tmplayout;
	}

	public void moveSelectedToFront() {
		int i = -1;
		Layout tmplayout = currLayout;
		if (getSelectedShape() != null) {
			currLayout = findLayoutByName(getSelectedShape().getLayout());
			i = currLayout.getShapesList().indexOf(getSelectedShape());
		}
		if (i != -1 && i < currLayout.getShapesList().size() - 1) {
			MyShape tmp = currLayout.getShape(i);
			currLayout.removeShape(i);
			currLayout.addShape(tmp);

			this.canvas.getChildren().clear();
			this.canvas.getChildren().add(gridPane);
			for (MyShape myShape : getAllShapesList()) {
				myShape.draw(this.canvas.getChildren());
			}
		}
		currLayout = tmplayout;
	}

	public void refresh(List<MyShape> theChangeToGoTo) {

		clearAll();
		for (MyShape myShape : theChangeToGoTo) {
			Layout layout = findLayoutByName(myShape.getLayout());
			if (layout == null) {
				layout = new Layout(myShape.getLayout(), true);
				layoutsList.add(layout);
			}
			layout.addShape(myShape);
		}

		menuUIController.refreshSelectLayoutList(layoutsList);

		for (int i = 0; i < getAllShapesList().size(); i++) {
			getAllShapesList().get(i).draw(this.canvas.getChildren());
		}
	}

	public void removeLayout(String text) {
		for (int i = layoutsList.size() - 1; i >= 0; i--) {
			if (layoutsList.get(i).getLayoutName().equals(text))
				layoutsList.remove(i);
		}
		this.canvas.getChildren().clear();
		this.canvas.getChildren().add(gridPane);
		for (MyShape myShape : getAllShapesList()) {
			myShape.draw(this.canvas.getChildren());
		}
	}

	public void resize(double parseDouble) {
		double scale = parseDouble / 100.0; // currently we only use Y, same value is used for X
		canvas.scaleXProperty().set(scale);
		canvas.scaleYProperty().set(scale);

	}

	public void setCanvas(AnchorPane canvas) {
		this.canvas = canvas;
	}

	public void setCurrentShape(SingleShape currentShape) {
		this.currentShape = currentShape;
	}

	public void setDraggableMode(boolean value) {
		if (value) {
			for (MyShape shape : getAllShapes()) {

				for (SingleShape singleShape : shape.getSingleShapeList()) {
					draggableModeListener(shape, singleShape);
				}
			}
		} else {
			for (SingleShape shape : getSingleShapesList()) {
				shape.setSelected(false);
				shape.disableDraggable();
			}
			stausBarController.setSelectedText(null);
		}
	}

	private void draggableModeListener(MyShape shape, SingleShape singleShape) {
		singleShape.getShape().setOnMouseDragged(t -> {
			for (SingleShape currSingleShape : shape.getSingleShapeList()) {
				currSingleShape.dragOnDragged(t.getSceneX(), t.getSceneY(), currSingleShape.getShape());
			}
		});

		singleShape.getShape().setOnMousePressed(t -> {
			for (SingleShape currSingleShape : shape.getSingleShapeList()) {
				if(currSingleShape.getRoot() != null) {
					currSingleShape.getRoot().setHadelsVisible(false);
				}
				currSingleShape.dragOnPressed(t.getSceneX(), t.getSceneY());
			}
			//Here put bounding box
			// Code pour le bounding box, do not touch it :D 
			/*
			 * if(boundingBox != null && canvas.getChildren().contains(boundingBox));
			 * canvas.getChildren().remove(boundingBox); boundingBox = new
			 * Rectangle(shape.getStartX(), shape.getStartY(),
			 * shape.getEndX()-shape.getStartX(), shape.getEndY()-shape.getStartY());
			 * boundingBox.setFill(Color.TRANSPARENT); boundingBox.setStroke(Color.BLACK);
			 * boundingBox.setVisible(true); canvas.getChildren().add(boundingBox);
			 */
			shapeSelected=singleShape;
			showMenuShape(true, singleShape);
		});
		singleShape.getShape().setOnMouseReleased(t -> {
			changesController.getRedoList().clear();
			changesController.saveStateToUndo();
			for (SingleShape currSingleShape : shape.getSingleShapeList()) {
				double str = currSingleShape.getStrokeSize();
				Color color = currSingleShape.getStrokeColor();
				currSingleShape.dragOnReleased(color, str);
			}
			stausBarController.setSelectedText(shape);
			menuUIController.getHistoryController().refreshHistoryTable();
		});
	}

	public void setFillColorPicker(ColorPicker colorPicker) {
		this.fillColorPicker = colorPicker;
	}

	public void setFilled(boolean isFilled) {
		this.isFilled = isFilled;
	}

	public void setImagePattern(String selectedPatternUrl) {
		this.selectedPatternUrl = selectedPatternUrl;
	}

	public void setMenuUIController(MenuUIController menuUIController) {
		this.menuUIController = menuUIController;
	}



	public void setResizeMode(boolean value) {
		if (value) {
			for (SingleShape shape : getSingleShapesList()) {
				shape.getShape().setOnMouseDragged(t -> onMouseDraggedComposedShape(shape, t));

				shape.getShape().setOnMousePressed(t -> onMousePressedComposedShape(shape, t)

				);

				shape.getShape().setOnMouseReleased(t -> onMouseReleasedComposedShape(shape));

			}
		} else {
			for (SingleShape shape : getSingleShapesList()) {
				shape.setSelected(false);
				shape.setHadelsVisible(false);
				shape.disableDraggable();
			}
			stausBarController.setSelectedText(null);
		}
	}

	private void onMousePressedComposedShape(SingleShape shape, MouseEvent t) {
		ComposedShape compShape = shape.getRoot();
		
		
		if (compShape == null)
			shape.resizeOnPressed(t.getSceneX(), t.getSceneY());
		else {
		
			
			
			for (SingleShape currShape : compShape.getSingleShapeList()) {
				currShape.resizeOnPressed(t.getSceneX(), t.getSceneY());
			}
		}
	}

	private void onMouseDraggedComposedShape(SingleShape shape, MouseEvent t) {
		ComposedShape compShape = shape.getRoot();
		if (compShape == null) {
			shape.resizeOnDragged(t.getSceneX(), t.getSceneY(), (Shape) t.getSource());

			shape.setHandelsPos();
			shape.setHadelsVisible(true);
		}

		else {
			
		
			for (SingleShape currshape : compShape.getSingleShapeList()) {
				currshape.resizeOnDragged(t.getSceneX(), t.getSceneY(), currshape.getShape());
				currshape.setHandelsPos();
				currshape.setHadelsVisible(true);
			}
		}
	}

	private void onMouseReleasedComposedShape(SingleShape shape) {
		changesController.getRedoList().clear();
		changesController.saveStateToUndo();

		ComposedShape compShape = shape.getRoot();
		if (compShape == null) {
			double str = shape.getStrokeSize();
			Color color = shape.getStrokeColor();
			shape.resizeOnReleased(color, str);
			shape.setHadelsVisible(false);
			stausBarController.setSelectedText(shape);
		} else {
			for (SingleShape currshape : compShape.getSingleShapeList()) {
				double str = currshape.getStrokeSize();
				Color color = currshape.getStrokeColor();
				currshape.resizeOnReleased(color, str);
				currshape.resizeOnReleased(color, str);
				currshape.setHadelsVisible(false);
				currshape.setHadelsVisible(false);
			}
			stausBarController.setSelectedText(compShape);
		}

		
		menuUIController.getHistoryController().refreshHistoryTable();
	}

	public void setScrollPane(ScrollPane scrollPane) {
		this.scrollPane = scrollPane;
	}

	public void setSelectionMode(boolean b) {
		isSelectionMode = b;
		if (b) {
			canvas.setOnMouseDragged(this::mouseDraggedSelection);
			canvas.setOnMousePressed(this::mousePressedSelection);
			canvas.setOnMouseReleased(e -> mouseReleasedSelection());
		} else {
			canvas.setOnMouseDragged(this::mouseDragged);
			canvas.setOnMousePressed(this::mousePressed);
			canvas.setOnMouseReleased(e -> mouseReleased());
		}
	}

	public void setStausBarController(StatusBarController stausBarController) {
		this.stausBarController = stausBarController;
	}

	public void setStrokeColorPicker(ColorPicker strokeColorPicker) {
		this.strokeColorPicker = strokeColorPicker;
	}

	public void setStrokeSize(double strokeSize) {
		this.strokeSize = strokeSize;
	}

	public void setUsingCenter(boolean b) {
		isUsingCenter = b;
	}

	public void setUsingMagnetism(boolean isUsingMagnetism) {
		this.isUsingMagnetism = isUsingMagnetism;
	}

	public void ungroupSelection() {
		if (getSelectedShape() != null) {
			int i = findLayoutByName(getSelectedShape().getLayout()).getShapesList().indexOf(getSelectedShape());
			MyShape tmpShape = getSelectedShape();
			currLayout.removeShape(i);
			for (int j = 0; j < tmpShape.getList().size(); j++) {
				tmpShape.getList().get(j).setRoot(null);
				currLayout.addShape(i + j, tmpShape.getList().get(j));
			}

		}

		this.canvas.getChildren().clear();
		this.canvas.getChildren().add(gridPane);
		for (MyShape myShape : getAllShapesList()) {
			myShape.draw(this.canvas.getChildren());
		}
	}

	public void updateCanvasScale(double newValue) {
		this.canvas.scaleXProperty().set(newValue / 100.0);
		this.canvas.scaleYProperty().set(newValue / 100.0);
		this.overlay.scaleXProperty().set(newValue / 100.0);
		this.overlay.scaleYProperty().set(newValue / 100.0);
	}

	public void updateScreenState(Canevas canevas) {
		this.fillColorPicker.setValue(canevas.getShapeFillColor());
		this.strokeColorPicker.setValue(canevas.getShapeStrokeColor());
		this.strokeSize = canevas.getStrokeSize();
		// update width // update height // update zoomvalue
		this.menuUIController.setSavingRepository(canevas.getSaveRepository());

		this.isFilled = canevas.isFilled();

		if (canevas.getRulerShown().equals("Cm")) {
			this.menuUIController.setInCM(true);
			this.menuUIController.getRulerInCm().setSelected(true);
			this.menuUIController.getRulerInInches().setSelected(false);
			this.menuUIController.showRulesInCM();
		} else if (canevas.getRulerShown().equals("Inch")) {
			this.menuUIController.setInCM(false);
			this.menuUIController.getRulerInCm().setSelected(false);
			this.menuUIController.getRulerInInches().setSelected(true);
			this.menuUIController.showRulerInInches();
		} else {
			this.menuUIController.setInCM(false);
			this.menuUIController.getRulerInCm().setSelected(false);
			this.menuUIController.getRulerInInches().setSelected(false);
			this.menuUIController.hideRulers();
		}

		menuUIController.showGridLines();
	}



	public void refreshVisibleLayouts(List<Layout> theChangeToGoTo) {
		this.getLayoutsList().clear();
		this.canvas.getChildren().clear();
		canvas.getChildren().add(gridPane);
		layoutsList.addAll(theChangeToGoTo);
		currLayout = layoutsList.get(layoutsList.size()-1);
		for (MyShape myShape : getAllShapesList()) {
			myShape.draw(this.canvas.getChildren());
		}
		menuUIController.refreshSelectLayoutList(layoutsList);
	}

	public List<Layout> getLayoutsListClone() {
		List<Layout> tmpList = new ArrayList<>();
		for (Layout layout : layoutsList) {
			tmpList.add(layout.getClone());
		}

		return tmpList;
	}

	public void setLayoutsList(List<Layout> arrayList) {
		this.layoutsList = (ArrayList<Layout>) arrayList;
	}

	public void setCurrLayout(Layout layout) {
		this.currLayout = layout;
	}

	public void setOverlay(AnchorPane anchorPane2) {
		this.overlay = anchorPane2;
	}

	public void setchangesController(ChangesController changesController2) {
		this.changesController = changesController2;
	}
	private void  showMenuGroup(boolean b) {
		
		if(b) {
			contextMenuGroup.hide();
			if(!selectedList.isEmpty() ) {
				itemOnClickGroup();
				
			    contextMenuGroup.getItems().add(item1);
			    contextMenuGroup.getItems().add(item4);
			    contextMenuGroup.getItems().add(item5);
				anchorPane.setOnContextMenuRequested(new EventHandler<ContextMenuEvent>() {	 
		            @Override
		             public void handle(ContextMenuEvent event) {
		 
		            	contextMenuGroup.show(anchorPane, event.getScreenX(), event.getScreenY());
		            	
		            	
		            }
		        });
				
			}
			showMenuShape(false, currentShape);
		}
		else {
			contextMenuGroup.getItems().removeAll(item1, item4, item5);
		}
	}
	private void  showMenuShape(boolean b, SingleShape singleshape){
		contextMenuShape.hide();	
		if(singleshape!=null) {		
				if(b) {
				itemOnClickShape();
			    contextMenuShape.getItems().add(0,item2);
			    contextMenuShape.getItems().add(1, item3);
			    contextMenuShape.getItems().add(2, item4);
			    contextMenuShape.getItems().add(3, item5);
			    contextMenuShape.getItems().add(4, item6);
			    contextMenuShape.getItems().add(5, item7);
				anchorPane.setOnContextMenuRequested(new EventHandler<ContextMenuEvent>() {	 
		             @Override
		            public void handle(ContextMenuEvent event) {
		            	contextMenuShape.show(anchorPane, event.getScreenX(), event.getScreenY());
		            	
		            }
		        });
				showMenuGroup(false);
			}
				else {
					contextMenuShape.getItems().removeAll(item2,item3,item4,item5,item6,item7);
					
				}
			
		}
		
	}
	
	private void itemOnClickGroup() {
		 item5.setOnAction(new EventHandler<ActionEvent>() {
			 
	            @Override
	            public void handle(ActionEvent event) {
	               System.out.println("flip vertical");
	              
	               //add code flip vertical
	            }
	        });
		 item4.setOnAction(new EventHandler<ActionEvent>() {
			 
	            @Override
	            public void handle(ActionEvent event) {
	               System.out.println("flip horizontal");
	               
	             //add code flip horizontal
	            }
	        });
		 item1.setOnAction(new EventHandler<ActionEvent>() {
			 
	            @Override
	            public void handle(ActionEvent event) {
	               System.out.println("save as a new shape");
	               
	             //add code as a new shape
	            }
	        });
	}
	private void itemOnClickShape() {
		 item5.setOnAction(new EventHandler<ActionEvent>() {
			 
	            @Override
	            public void handle(ActionEvent event) {
	               System.out.println("flip vertical");
	               setSelected(shapeSelected);
	               //add code flip vertical
	            }
	        });
		 item4.setOnAction(new EventHandler<ActionEvent>() {
			 
	            @Override
	            public void handle(ActionEvent event) {
	               System.out.println("flip horizontal");
	               setSelected(shapeSelected);
	             //add code flip horizontal
	            }
	        });
		 item2.setOnAction(new EventHandler<ActionEvent>() {
			 
	            @Override
	            public void handle(ActionEvent event) {
	               System.out.println("move to front");
	               setSelected(shapeSelected);
	               moveSelectedToFront();
	            }
	        });
		 item3.setOnAction(new EventHandler<ActionEvent>() {
			 
	            @Override
	            public void handle(ActionEvent event) {
	               System.out.println("move to back");
	              setSelected(shapeSelected);
	               moveSelectedToBack();
	            }
	        });
		 item6.setOnAction(new EventHandler<ActionEvent>() {
			 
	            @Override
	            public void handle(ActionEvent event) {
	               System.out.println("move forward");
	               setSelected(shapeSelected);
	             moveForward();
	            }
	        });
		 item7.setOnAction(new EventHandler<ActionEvent>() {
			 
	            @Override
	            public void handle(ActionEvent event) {
	               System.out.println("move backward");
	               setSelected(shapeSelected);
	             moveBackward();
	            }
	        });
	}

	public void setPaletteOutilsUIController(PaletteOutilsUIController paletteOutilsController) {
		// TODO Auto-generated method stub
		paletteOutilsUI = paletteOutilsController;
		File folder = new File("customShapes/");
		File[] listOfFiles = folder.listFiles();

		for (int i = 0; i < listOfFiles.length; i++) {
		  if (listOfFiles[i].isFile()) {
			  paletteOutilsUI.addCustomShape(listOfFiles[i].getName().substring(0, listOfFiles[i].getName().lastIndexOf('.')));
	} 
		}

	}

	public void importCustomShape(String substring) {
		// TODO Auto-generated method stub
		menuUIController.importCustomShape("customShapes" + File.separator + substring + ".txt");
	}

	public Layout getCurrLayout() {
		return currLayout;
	}

	public void drawShape(ComposedShape myShape) {
		myShape.draw(this.canvas.getChildren());
	}



}
