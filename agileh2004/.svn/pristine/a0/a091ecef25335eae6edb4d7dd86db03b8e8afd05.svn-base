package application.model;

import javafx.animation.RotateTransition;
import javafx.scene.layout.GridPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Polygon;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.Shape;
import javafx.scene.shape.StrokeLineCap;
import javafx.scene.transform.Rotate;

public class VerticalTriangle extends MyTriangle {
	int i=2;
	@Override
	public void createShape(boolean isUsingCenter, boolean isUsingMagnetism, GridPane gridPane) {
		initCircles();
		if (isUsingMagnetism) {
			drawWithMagnetism(gridPane);
		}
		if (isUsingCenter && !isUsingMagnetism) {
			double centerX = startX;
			double centerY = startY;

			startX = 2 * centerX - endX;
			startY = 2 * centerY - endY;
		}

		arrangeStartAndEndXY();

		Double width = Math.abs(this.startX - this.endX);
		Double height = Math.abs(this.startY - this.endY);
		shape = new Polygon(startX, startY, startX + width, endY - (height / 2), startX, endY);
		shape.setStroke(strokeColor);
		shape.setStrokeWidth(strokeSize);
		filler.fill();
		applyRotation();

	}

	@Override
	public void updateFields() {
		Polygon c = (Polygon) shape;
		this.startX = c.getBoundsInLocal().getMinX();
		this.startY = c.getBoundsInLocal().getMinY();
		this.endX = c.getBoundsInLocal().getMaxX();
		this.endY = c.getBoundsInLocal().getMaxY();
		this.strokeColor = (Color) c.getStroke();
		this.strokeSize = c.getStrokeWidth();
		this.rotate = c.getRotate();

	}

	@Override
	public void enlarge() {
		Double height = Math.abs(this.startY - this.endY);
		Polygon vTriangle = (Polygon) shape;
		vTriangle.getPoints().setAll(startX, startY, endX + ENLARGE_CONST, endY - ENLARGE_CONST - (height / 2), startX,
				endY + ENLARGE_CONST);

		updateFields();

	}

	@Override
	public SingleShape clone1() {
		return new VerticalTriangle();
	}

	@Override
	public SingleShape emptyClone() {
		return new VerticalTriangle();
	}

	@Override
	public String toString() {
		return "VerticalTriangle";
	}

	@Override
	public void flipShape(boolean value) {

		Polygon c = (Polygon) shape;
		RotateTransition rotate = new RotateTransition();
		
		

		if (value) {
			rotate.setAxis(Rotate.X_AXIS);
		} else
			rotate.setAxis(Rotate.Y_AXIS);

		rotate.setByAngle(180);
		rotate.setNode(c);
		rotate.play();


		updateFields();
	}

	@Override
	public void flipComposedShape(boolean value, double xPivot, double yPivot) {
		
		Polygon c = (Polygon) shape;
		// Creating the rotation transformation
		Rotate rotate = new Rotate();

		
	
		// Setting the angle for the rotation (180 degrees)
		rotate.setAngle(180);

		// Setting pivot points for the rotation
		rotate.setPivotX(xPivot);
		rotate.setPivotY(yPivot);

		if (value) {
			rotate.setAxis(Rotate.X_AXIS);
			this.isflipedY=!this.isflipedY;
		} else {
			rotate.setAxis(Rotate.Y_AXIS);
			this.isflipedX=!this.isflipedX;
		}
			
		// Adding the transformation to Polygon
		c.getTransforms().addAll(rotate);

		

		updateFields();
		
	}

	public void resizeOnDragged(double x, double y, Shape shape) {
		shape.setStrokeLineCap(StrokeLineCap.BUTT);
		Double width = Math.abs(this.startX - this.endX);
		Double height = Math.abs(this.startY - this.endY);
		shape.getStrokeDashArray().addAll(10d, 5d);
		Polygon c = (Polygon) (shape);
		double offsetX = x - orgSceneX;
		double offsetY = y - orgSceneY;

		setStartX(startX+offsetX);
		setStartY(startY+offsetY);

		if(startY>endY) {
			c.getPoints().setAll(startX, startY, endX , endY - (height / 2), startX, endY - 2*height);

		}

		else {
			c.getPoints().setAll(startX, startY, endX , endY - (height / 2), startX, startY+height);

		}



		orgSceneX = x;
		orgSceneY = y;
		i++;
	}



}
